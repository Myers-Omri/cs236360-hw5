%{
	#include "Contracts.hpp"
	#include "Utils.hpp"
	#include "mipsUtils.hpp"
	#include <iostream>
	#include <stdlib.h>
	
	using namespace std;

	extern int yylex();
	int yyerror(char * message);
	void addFunc(STYPE id, STYPE ret);
	extern int yylineno;
	SymbolTable* symbolTable;
	AssGen* AG;
	bool isAnyFuncDefined;
	void handleBinop(STYPE exp1, STYPE binOp, STYPE exp2, STYPE parent);
%}

%token VOID INT BYTE B BOOL STRINGTYPE TRUE FALSE RETURN IF WHILE SWITCH CASE BREAK COLON SC COMMA LPAREN LBRACE RBRACE ID NUM STRING EOFF

%nonassoc RPAREN /* solving dangling-else problem */
%nonassoc ELSE /* solving dangling-else problem */

%right ASSIGN
%left OR
%left AND
%left RELOP
%left SUMOP
%left MULOP
%right NOT

%%

S : M Program EOFF {symbolTable->EndProg(); AG->printAssembly(); exit(1);}
;

Program	: Funcs
          {
			
            if(!symbolTable->IsMainDefined)
            {
                output::errorMainMissing();
                exit(0);
            }
          }
	;

Funcs : FuncDecl Funcs | {if(!isAnyFuncDefined) {output::errorSyn(yylineno);exit(0);}}
	;

FuncDecl : RetType ID LPAREN Formals RPAREN {addFunc($2,$1);} LBRACE V Statements RBRACE
           {
                isAnyFuncDefined = true;
                /*if(areEqualTypes(symbolTable->ReturnType, $1.type))
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }*/
                if($1.type == _VOID && $2.varName == MAIN && symbolTable->formalList.argTypes.size() == 0)
                    symbolTable->IsMainDefined = true;
				symbolTable->EndScope();
                symbolTable->FlushFormalList();
                symbolTable->ReturnType = _VOID;
           }
    ;

RetType : Type
          {
                $$.type = $1.type;
          } |
          VOID { $$.type = _VOID;}
    ;

Formals : FormalsList | /*epsilon*/
    ;

FormalsList : FormalDecl |
              FormalDecl COMMA FormalsList
    ;

FormalDecl : Type ID
             {
                symbolTable->AddToFormalList($2.varName,$1.type);
             }
    ;

Statements : Statement 
			{
				$$.type = $1.type;
				AG->bpStmnt($$, $1);
			} | 
			Statements Mbp Statement 
			{
				$$.type = $2.type;
				AG->bpStmntList($$, $1, $2, $3);
			}
    ;

Statement : V LBRACE M Statements RBRACE
            {
                symbolTable->EndScope();
                $$.nextList = $2.nextList;
            } |
            Type ID SC
            {
                if(symbolTable->IsWhileOrIfIntact)
                {
                    symbolTable->OpenScope();
                    symbolTable->IsWhileOrIfScopeOpened = true;
                }
                symbolTable->IsWhileOrIfIntact = false;
                varType out;
                if(symbolTable->GetVar($2.varName,out))
                {
                    output::errorDef(yylineno,$2.varName.c_str());
                    exit(0);
                }
				$2.type = $1.type;
                symbolTable->AddVar($2.varName,$1.type);
                AG->emitPushLocal();
            } |
            Type ID ASSIGN Exp SC
            {
                varType outExp = $4.type;
                if(symbolTable->IsWhileOrIfIntact)
                {
                    symbolTable->OpenScope();
                    symbolTable->IsWhileOrIfScopeOpened = true;
                }
                symbolTable->IsWhileOrIfIntact = false;
                
                if(!areEqualTypes($1.type,outExp))
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }

                varType out;
                if(symbolTable->GetVar($2.varName,out))
                {
                    output::errorDef(yylineno,$2.varName.c_str());
                    exit(0);
                }

				if(isByte($1.type) && isNumeric(outExp) && ($4.numVal >= MAXBYTE))
                {
                    char* str = toString($4.numVal); //TODO: try to find a better intToString
                    output::errorByteTooLarge(yylineno,str);
                    free(str); //TODO: i'm crying
                    exit(0);
                }
				$2.type = $1.type;
                symbolTable->AddVar($2.varName,$1.type);
				AG->emitPushInitializedLocal($4);
            } |
            ID ASSIGN Exp SC
            {
                varType outId;
                bool resId = symbolTable->GetVarToAssign($1.varName,outId);
                if(!resId)
                {
                    output::errorUndef(yylineno,$1.varName.c_str());
                    exit(0);
                }
                
                bool intAndByte = (areEqualTypes(outId,$3.type));
                if(!intAndByte)
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
               
                if(isByte(outId) && isNumeric($3.type) && $3.numVal >= MAXBYTE)
                {
                    char* str = toString($4.numVal); //TODO: try to find a better intToString
                    output::errorByteTooLarge(yylineno,str);
                    free(str); //TODO: i'm crying
                    exit(0);
                }
                AG->emitUpdateLocal($1,$3);
            } |
            Call SC {
				$$.type = $1.type;
				//need to add here put var on stack ???
			
			} |
            RETURN SC
            {
                if(symbolTable->ReturnType != _VOID)
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
            } |
            RETURN Exp SC
            {
                varType outType;
                bool resExp = symbolTable->GetVar($2.varName,outType);

				/* cout << "in RETURN Exp SC:" << endl;
				if (resExp){
				cout << "found varName: " << $2.varName << endl;
				cout << "out Type is: " << outType << endl;
				cout << "st-> returntype is: " << symbolTable->ReturnType << endl;
				} 
				 cout << "st-> returntype is: " << symbolTable->ReturnType << endl; */
                if((symbolTable->ReturnType == _VOID) 
				|| (resExp && !areEqualTypes(symbolTable->ReturnType, outType)) 
				|| ((!resExp) && !areEqualTypes(symbolTable->ReturnType, $2.type)))
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
				//need to add here put var on stack or in the right register

            } |
            IF LPAREN Exp RPAREN K Statement
            {
                if(!isBoolean($3.type))
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
                if(symbolTable->IsWhileOrIfScopeOpened)
                {
                    symbolTable->EndScope();
                    symbolTable->IsWhileOrIfScopeOpened = false;
                }
                $$.type = $6.type;
				AG->bpIf($$, $3, $5, $6);

            } |
            IF LPAREN Exp RPAREN K Statement ELSE Nbp KE Statement
            {
                if(!isBoolean($3.type))
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
                if(symbolTable->IsWhileOrIfScopeOpened)
                {
                    symbolTable->EndScope();
                    symbolTable->IsWhileOrIfScopeOpened = false;
                }
                $$.type = $9.type;
				AG->bpIfElse($$, $3, $5, $6, $8, $9, $10);
            } |
            WHILE Mbp LPAREN Exp RPAREN W Statement
            {
                if(!isBoolean($3.type))
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
                symbolTable->WhileCount--;
                if(symbolTable->IsWhileOrIfScopeOpened)
                {
                    symbolTable->EndScope();
                    symbolTable->IsWhileOrIfScopeOpened = false;
                }
				AG->emitWhile($$, $2, $4,  $6, $7);
            } |
            BREAK SC
            {
			// TODO: Add Logic to this!!!!!!!!!!!!!!
                if(symbolTable->WhileCount <= 0)
                {
                    output::errorUnexpectedBreak(yylineno);
                    exit(0);
                }
            } |
            SWITCH LPAREN Exp RPAREN KS LBRACE CaseList RBRACE SC
            {
                if(!isNumeric($3.type))
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
            }
    ;

CaseList : CaseStat CaseList | CaseStat
    ;

CaseStat : CASE NUM COLON CKE Statement BREAK SC 
			{
			if(symbolTable->IsWhileOrIfScopeOpened)
                {
                    symbolTable->EndScope();
                    symbolTable->IsWhileOrIfScopeOpened = false;
                }
			}|
           CASE NUM B COLON CKE Statement BREAK SC
		   {
			if(symbolTable->IsWhileOrIfScopeOpened)
                {
                    symbolTable->EndScope();
                    symbolTable->IsWhileOrIfScopeOpened = false;
                }
			}
    ;

Call : ID LPAREN ExpList RPAREN
        {
            if($1.varName == LIBPRINT)
            {
                if((symbolTable->expList.size() != 1) || !isString(symbolTable->expList.back()))
                {
                    std::vector<const char*> stringVec;
                    stringVec.push_back("STRING");
                    output::errorPrototypeMismatch(yylineno,LIBPRINT,stringVec);
                    exit(0);
                }
                $$.type = _VOID;
				AG->emit("#### calling print");
				//call meit func by id with ($$, $1 ,1);
                symbolTable->FlushExpList(1);
				
            }
            else if($1.varName == LIBPRINTI)
            {
                if((symbolTable->expList.size() != 1) || !isNumeric(symbolTable->expList.back()))
                {
                    std::vector<const char*> intVec;
                    intVec.push_back("INT");
                    output::errorPrototypeMismatch(yylineno,LIBPRINTI,intVec);
                    exit(0);
                }
                $$.type = _VOID;
                symbolTable->FlushExpList(1);
				AG->emit("call printi");

            }
            else
            {
                vector<varType> expected;
                varType retType;

                SymbolTableResult res = symbolTable->CallFunc($1.varName,expected,retType);

				/*
				std::cout << "in call: \nid is: " << $1.varName << " expList :" << std::endl;
				std::cout << "size explist is:"<< symbolTable->expList.size() <<std::endl;
				std::cout << symbolTable->expList[0] << symbolTable->expList[1]<<std::endl;
				std::cout << "size expected  is:"<< expected.size() <<std::endl;
				std::cout << "expected is:" << expected[0] << std::endl;
				*/
                
				if(res == PROTOTYPE_MISMATCH)
                {
                    output::errorPrototypeMismatch(yylineno,$1.varName.c_str(),getTypeNames(expected));
                    exit(0);
                }
                if(res == NOT_DEFINED)
                {
                    output::errorUndefFunc(yylineno,$1.varName.c_str());
                    exit(0);
                }
				symbolTable->FlushExpList(expected.size());
                $$.type = retType;
				$1.type = retType;

				// ############ add here calculate func val###################### 
            }
        } |
        ID LPAREN RPAREN
        {
            vector<varType> expected;
            varType retType;
            SymbolTableResult res = symbolTable->CallFunc($1.varName,expected,retType);
            if(res == PROTOTYPE_MISMATCH)
            {
                output::errorPrototypeMismatch(yylineno,$1.varName.c_str(),getTypeNames(expected));
                exit(0);
            }
            if(res == NOT_DEFINED)
            {
                output::errorUndefFunc(yylineno,$1.varName.c_str());
                exit(0);
            }
            $$.type = retType;
			$1.type = retType;
			// ############ add here calculate func val###################### 
        }
    ;

ExpList : Exp
          {
		  //std::cout << "in ExpList : Exp \nExp is:" << $1.type <<std::endl;
            symbolTable->AddToExpList($1.type);
          } |
          Exp COMMA ExpList
          {
		  //std::cout << "in ExpList : Exp COMMA ExpList \nExp1 is:" << $1.type  <<std::endl;
            symbolTable->AddToExpList($1.type);
          }
    ;

Type : INT {$$.type = _INT;} | BYTE {$$.type = _BYTE;} | BOOL {$$.type = _BOOL;}

    ;

Exp : LPAREN Exp RPAREN
      {
            $$.type = $2.type;
            symbolTable->LastExpTypeIs = $2.type;
            $$.regName = $2.regName;
            AG->bpParen($$, $2);
      } |
      ID
      {
            varType type;
            bool result = symbolTable->GetVar($1.varName,type);
            if(!result)
            {
                output::errorUndef(yylineno,$1.varName.c_str());
                exit(0);
            }
            $$.type = type;
            $$.varName = $1.varName;


			/* $$.numVal = $1.numVal;
			$$.stringVal = $1.stringVal;
			$$.boolVal = $1.boolVal; */
			// ################# add here get real val ########################
			symbolTable->LastExpTypeIs = type;
			AG->emitLoadIdToReg($1, $$);
      } |
      Call 
	  {		
			$$.type = $1.type;
			$$.numVal = $1.numVal;
			$$.stringVal = $1.stringVal;
			$$.boolVal = $1.boolVal;
			symbolTable->LastExpTypeIs = $1.type;
	  } |

      NUM
      {
            $$.type = _INT;
            $$.numVal = $1.numVal;
            $$.varName="";
            symbolTable->LastExpTypeIs = _INT;
            AG->emitLoadNumToReg($1,$$); //Also adds the regName to the parent
      } |
      NUM B
      {
            $$.type = _BYTE;
            $$.numVal = $1.numVal;
            $$.varName="";
			if($1.numVal >= MAXBYTE)
            {
                char* str = toString($1.numVal); //TODO: try to find a better intToString
                output::errorByteTooLarge(yylineno,str);
                free(str); //TODO: i'm crying
                exit(0);
            }
			symbolTable->LastExpTypeIs = _BYTE;
			AG->emitLoadNumToReg($1,$$);
      } |
      STRING {$$.type = _STRING; $$.stringVal = $1.stringVal; $$.varName=""; symbolTable->LastExpTypeIs = _STRING;} |
      TRUE {$$.type = _BOOL; $$.boolVal = $1.boolVal; 
			$$.varName=""; 
			symbolTable->LastExpTypeIs = _BOOL;
			AG->emitTrue($$);
			AG->emitLoadBoolToReg($1, $$);
			} |
      FALSE {$$.type = _BOOL; 
			$$.boolVal = $1.boolVal; 
			$$.varName=""; 
			symbolTable->LastExpTypeIs = _BOOL;
			AG->emitFalse($$);
			AG->emitLoadBoolToReg($1, $$);
			} |
      NOT Exp
      {
	  		varType out1 = $2.type;
               
            if(!isBoolean(out1))
            {
                output::errorMismatch(yylineno);
                exit(0);
            }
            
            $$.type = _BOOL;
            $$.boolVal = !$1.boolVal;
			symbolTable->LastExpTypeIs = _BOOL;
			AG->bpNot($$, $2);
      } |
      Exp AND Mbp Exp
      {
            if(!isBoolean($1.type) || !areEqualTypes($1.type,$3.type))
            {
                output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = $1.type;
            $$.boolVal = $1.boolVal && $3.boolVal;
			symbolTable->LastExpTypeIs = _BOOL;
			AG->bpAnd($$, $1,$3, $4);
      } |
      Exp OR Mbp Exp
      {
            if(!isBoolean($1.type) || !areEqualTypes($1.type,$3.type))
            {
                output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = $1.type;
            $$.boolVal = $1.boolVal || $3.boolVal;
			symbolTable->LastExpTypeIs = _BOOL;
			AG->bpOr($$, $1, $3, $4);
      
	  } |
      Exp RELOP Exp
      {
			varType out1 = $1.type;
			varType out2 = $3.type;
			if(!isNumeric(out1)  || !isNumeric(out2))
            {
                output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = _BOOL;
			$$.boolVal = calcRelOp($1.numVal, $2.relVal, $3.numVal);
			AG->emitRelopEval($$,$1,$2.relVal, $3);
			symbolTable->LastExpTypeIs = _BOOL;
      } |
      Exp MULOP Exp {handleBinop($1,$2,$3,$$);} |

      Exp SUMOP Exp {handleBinop($1,$2,$3,$$);}
    ;

M : { symbolTable->OpenScope();}
    ;



W : {
        symbolTable->WhileCount++;
        symbolTable->IsWhileOrIfIntact = true;
		if ( !(symbolTable->LastExpTypeIs == _BOOL)){
		output::errorMismatch(yylineno);
        exit(0);
	}
	AG->addNextInstr($$);
    }
    ;

K : { symbolTable->IsWhileOrIfIntact = true; 
		if ( !(symbolTable->LastExpTypeIs == _BOOL)){
		output::errorMismatch(yylineno);
        exit(0);
	}
	AG->addNextInstr($$);
	}
    ;

KS : { 
		if (! isNumeric(symbolTable->LastExpTypeIs)){
		output::errorMismatch(yylineno);
        exit(0);
	}}
    ;
KE : {
		if(symbolTable->IsWhileOrIfScopeOpened)
                {
                    symbolTable->EndScope();
                    symbolTable->IsWhileOrIfScopeOpened = false;
                }
		 symbolTable->IsWhileOrIfIntact = true;
		AG->addNextInstr($$);
	}
    ;
CKE : {
		if(symbolTable->IsWhileOrIfScopeOpened)
                {
                    symbolTable->EndScope();
                    symbolTable->IsWhileOrIfScopeOpened = false;
                }
		 symbolTable->IsWhileOrIfIntact = true;
	}
    ;

V : {symbolTable->IsWhileOrIfIntact = false;}
    ;

Mbp : {AG->addNextInstr($$);}
		;

Nbp : {AG->emitNbp($$);} 
		;

%%

int main(){
	symbolTable = new SymbolTable();
	//RS = new RegisterStore();
	AG = new AssGen(symbolTable);
	
	isAnyFuncDefined = false;

	AG->emitPrintI();
	AG->emitPrint();

	yyparse();
    

	//CodeBuffer::instance().printCodeBuffer();
}

int yyerror(char * message){
	output::errorSyn(yylineno);
	exit(0);
}

void handleBinop(STYPE exp1, STYPE binOp, STYPE exp2, STYPE parent){
    if(!isNumeric(exp1.type) || !isNumeric(exp2.type))
    {
        output::errorMismatch(yylineno);
        exit(0);
    }
    if (isInt(exp1.type) || isInt(exp2.type))
    {
        parent.type = _INT;
        symbolTable->LastExpTypeIs = _INT;
    }
    else
    {
        parent.type = _BYTE;
        symbolTable->LastExpTypeIs = _BYTE;
    }
    if ((binOp.binVal == _DEV)  && (exp2.numVal == 0)){
        cout << "Error division by zero\n";
        exit(0);
    }
    AG->emitBin(exp1,exp2,parent,binOp.binVal);
}

void checkBool(varType vt){
	if (vt != _BOOL){
		output::errorMismatch(yylineno);
        exit(0);
	}
}

void addFunc(STYPE id, STYPE ret){

    if(ret.type != _INT && ret.type != _BOOL && ret.type != _BYTE && ret.type != _VOID)
    {
        output::errorMismatch(yylineno);
        exit(0);
    }

	string varNameOut;
    SymbolTableResult res = symbolTable->AddFunc(id.varName,ret.type, varNameOut);
    if(res == FAIL)
    {
        output::errorDef(yylineno,varNameOut.c_str());
        exit(0);
    }
    symbolTable->ReturnType = ret.type;
}


